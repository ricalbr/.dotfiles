" ideavimrc

" let mapleader = " "
let mapleader = "\<SPACE>"

" basic config
set ignorecase smartcase
set hlsearch
set showmode
set scrolloff=5
set history=1000
set surround
set incsearch
set number relativenumber
set idearefactormode=keep
set smartcase
set hlsearch
set visualbell

" plugins
set commentary
set ideajoin
set exchange

" clear the search buffer when hitting return
nnoremap <Esc><Esc> :nohlsearch<CR>

" Shortcut for escape
imap jj <Esc>
imap jk <Esc>

" Quick window navigation
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h

" Put search results in the middle of the screen
nnoremap n nzz
nnoremap N Nzz

" Shortcut for copying to/from System Clipboard
nnoremap Y y$
vmap <leader>y "+y
vmap <leader>d "+d
nmap <leader>P "+P
vnoremap <leader>p "_dP

" Splitting Windows
nmap <leader>v :vsplit<CR>
nmap <leader>h :split<CR>

" Some search and replace shortcuts
nnoremap <leader><leader>r :%s//g<Left><Left>
xnoremap <leader><leader>r :s//g<Left><Left>

" Code indentation
vnoremap > >gv
vnoremap < <gv
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" actions
nmap <leader>w <action>(HideAllWindows)
nmap <leader>bd <action>(CloseEditor)
nmap <leader>t <action>(ActivateTerminalToolWindow)
nmap zc <action>(CollapseRegion)
nmap zo <action>(ExpandRegion)
nmap <leader>zc <action>(CollapseAllRegions)
nmap <leader>zo <action>(ExpandAllRegions)
nmap <leader>mm <action>(CodeGlance.toggle)

nmap <Tab> <action>(NextTab)
nmap <S-Tab> <action>(PreviousTab)
nmap [[ <action>(MethodUp)
nmap ]] <action>(MethodDown)

nmap <leader>gf <action>(GotoFile)
nmap <leader>gc <action>(GotoClass)
nmap <leader>gs <action>(GotoSymbol)
nmap <leader>gi <action>(GotoImplementation)
nmap <leader>gd <action>(GotoDeclaration)
nmap <leader>gp <action>(GotoSuperMethod)
nmap <leader>gt <action>(GotoTest)
nmap <leader>ge <action>(GotoNextError)
nmap <leader>gE <action>(GotoPreviousError)
nmap <leader>gb <action>(Back)
nmap <leader>gw <action>(Forward)

nmap <leader>sg <action>(SearchEverywhere)
nmap <leader>ff <action>(FindInPath)

nmap <leader>rn <action>(RenameElement)
nmap <leader>= <action>(ReformatCode)
nmap <leader>r <action>(Refactorings.QuickListPopupAction)
nmap <leader>o <action>(OptimizeImports)
nmap <leader>df <action>(ToggleDistractionFreeMode)

set NERDTree
let g:NERDTreeMapActivateNode='l'
let g:NERDTreeMapJumpParent='h'
nmap <leader>nn :NERDTreeToggle<CR>
